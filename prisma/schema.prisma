generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  address      String      @unique
  swapTxs      Swap[]
  liquidityTxs Liquidity[]
  dcas         DCA[]
  orders       Order[]
}

model Token {
  address        String        @id
  name           String
  symbol         String
  decimals       Int
  poolsAsToken0  Pool[]        @relation("pool0")
  poolsAsToken1  Pool[]        @relation("pool1")
  tokensAsReward RewardToken[]
}

model Pool {
  address       String       @id
  binStep       Int
  token0Address String
  token1Address String
  token0        Token        @relation("pool0", fields: [token0Address], references: [address], onDelete: Cascade)
  token1        Token        @relation("pool1", fields: [token1Address], references: [address], onDelete: Cascade)
  analytics     Analytics[]
  swapTxs       Swap[]
  liquidityTxs  Liquidity[]
  orders        Order[]
  rewardPools   RewardPool[]
}

model Analytics {
  date         DateTime
  volume       Int
  fees         Float
  token0Locked String
  token1Locked String
  usdLocked    Int
  close        Float
  high         Float
  low          Float
  open         Float
  poolAddress  String
  pool         Pool     @relation(fields: [poolAddress], references: [address], onDelete: Cascade)

  @@id([poolAddress, date])
  @@index([date], map: "date")
}

model Swap {
  poolAddress  String
  swapForY     Boolean
  binId        Int
  amountIn     String
  amountOut    String
  timestamp    DateTime
  txHash       String
  usdValue     Float
  userAddress  String
  indexInSlot  Int
  feesIn       String
  feesUsdValue Float
  pool         Pool     @relation(fields: [poolAddress], references: [address], onDelete: Cascade)
  user         User     @relation(fields: [userAddress], references: [address])

  @@id([txHash, indexInSlot])
  @@index([timestamp, poolAddress], map: "timestamp")
}

model Liquidity {
  poolAddress String
  amount0     String
  amount1     String
  timestamp   DateTime
  txHash      String
  lowerBound  Int
  upperBound  Int
  usdValue    Float
  userAddress String
  indexInSlot Int      @default(1)
  pool        Pool     @relation(fields: [poolAddress], references: [address], onDelete: Cascade)
  user        User     @relation(fields: [userAddress], references: [address])

  @@id([txHash, indexInSlot])
}

model DCA {
  id            Int            @id
  txHash        String
  userAddress   String
  status        Status
  amountEachDCA String
  endTime       DateTime
  interval      Int
  nbOfDCA       Int
  startTime     DateTime
  tokenIn       String
  tokenOut      String
  execution     DCAExecution[]
  user          User           @relation(fields: [userAddress], references: [address])
}

model DCAExecution {
  amountIn  String
  amountOut String
  thread    Int
  period    Int
  blockId   String
  dcaId     Int
  dca       DCA    @relation(fields: [dcaId], references: [id], onDelete: Cascade)

  @@id([dcaId, blockId])
}

model Order {
  id             Int             @id
  txHash         String
  poolAddress    String
  swapForY       Boolean
  amountIn       String
  amountOutMin   String
  deadline       DateTime
  userAddress    String
  status         Status
  binId          Int
  user           User            @relation(fields: [userAddress], references: [address])
  pool           Pool            @relation(fields: [poolAddress], references: [address])
  orderExecution OrderExecution?
}

model OrderExecution {
  amountIn  String
  amountOut String
  thread    Int
  period    Int
  orderId   Int    @unique
  blockId   String
  order     Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Maker {
  address        String
  date           DateTime
  poolAddress    String
  accruedFeesX   String
  accruedFeesY   String
  accruedFeesL   String
  accruedFeesUsd Float
  volume         Float

  @@id([address, poolAddress, date])
}

model RewardPool {
  epoch        Int
  poolAddress  String
  pool         Pool          @relation(fields: [poolAddress], references: [address], onDelete: Cascade)
  rewardTokens RewardToken[]

  @@id([poolAddress, epoch])
}

model RewardToken {
  amount            String
  address           String
  rewardEpoch       Int
  rewardPoolAddress String
  rewardPool        RewardPool @relation(fields: [rewardPoolAddress, rewardEpoch], references: [poolAddress, epoch], onDelete: Cascade)
  token             Token      @relation(fields: [address], references: [address], onDelete: Cascade)

  @@id([rewardPoolAddress, rewardEpoch, address])
}

model Bin {
  date        DateTime
  binId       Int
  poolAddress String
  volumeUsd   Float
  feesUsd     Float

  @@id([poolAddress, binId, date])
}

model Leaderboard {
  userAddress   String @unique
  discordId     String @unique
  score         Float
  zealySprintId Int

  @@id([zealySprintId, userAddress])
}

model TokenAnalytics {
  date         DateTime
  volume       Int
  fees         Float
  close        Float
  high         Float
  low          Float
  open         Float
  tokenAddress String

  @@id([tokenAddress, date])
  @@index([date], map: "date")
}

model TokenBalance {
  id                       Int       @id @default(autoincrement())
  tokenAddress             String
  balance                  String
  value                    Float
  userAnalyticsUserAddress String?
  userAnalyticsDate        DateTime?
}

model UserAnalytics {
  date        DateTime
  totalValue  Float
  userAddress String

  @@id([userAddress, date])
  @@index([date], map: "date")
}

model Log {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  message   String
  data      Bytes
}

model Block {
  id            String         @id
  period        Int
  thread        Int
  createdAt     DateTime       @default(now())
  operations    Operation[]
  ledgerChanges LedgerChange[]
}

model Operation {
  id             String   @id
  targetAddress  String
  targetFunction String
  value          BigInt
  maxGas         BigInt
  indexInBlock   Int      @default(0)
  data           Bytes
  blockId        String
  callerAddress  String
  createdAt      DateTime @default(now())
  events         Event[]
  block          Block    @relation(fields: [blockId], references: [id])
}

model Event {
  id             Int       @id @default(autoincrement())
  emitterAddress String
  operationId    String
  data           Bytes
  indexInSlot    Int
  createdAt      DateTime  @default(now())
  operation      Operation @relation(fields: [operationId], references: [id])
}

model LedgerChange {
  id        Int      @id @default(autoincrement())
  address   String
  key       Bytes
  value     Bytes
  blockId   String
  createdAt DateTime @default(now())
  block     Block    @relation(fields: [blockId], references: [id])
}

enum Status {
  ACTIVE
  STOPPED
  ENDED
}
