generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model User {
  address      String      @unique
  swapTxs      Swap[]
  liquidityTxs Liquidity[]
}

model Token {
  address       String @id
  name          String
  symbol        String
  decimals      Int
  poolsAsToken0 Pool[] @relation("pool0")
  poolsAsToken1 Pool[] @relation("pool1")
}

model Pool {
  address       String      @id
  token0        Token       @relation(fields: [token0Address], references: [address], name: "pool0")
  token1        Token       @relation(fields: [token1Address], references: [address], name: "pool1")
  binStep       Int
  token0Address String
  token1Address String
  analytics     Analytics[]
  swapTxs       Swap[]
  liquidityTxs  Liquidity[]
}

model Analytics {
  pool         Pool     @relation(fields: [poolAddress], references: [address])
  poolAddress  String
  date         DateTime
  open         Float
  close        Float
  high         Float
  low          Float
  volume       Int
  fees         Int
  token0Locked BigInt
  token1Locked BigInt
  usdLocked    Int

  @@id([poolAddress, date])
}

model Swap {
  pool        Pool     @relation(fields: [poolAddress], references: [address])
  poolAddress String
  swapForY    Boolean
  binId       Int
  amountIn    BigInt
  amountOut   BigInt
  usdValue    Float
  timestamp   DateTime
  txHash      String   @id
  User        User?    @relation(fields: [userAddress], references: [address])
  userAddress String?  @default("")
}

model Liquidity {
  pool        Pool     @relation(fields: [poolAddress], references: [address])
  poolAddress String
  amount0     BigInt
  amount1     BigInt
  usdValue    Float
  lowerBound  Int
  upperBound  Int
  timestamp   DateTime
  txHash      String   @id
  User        User?    @relation(fields: [userAddress], references: [address])
  userAddress String?
}
